// automatically generated by the FlatBuffers compiler, do not modify

package org.knime.python2.serde.flatbuffers.flatc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ByteColumn extends Table {
  public static ByteColumn getRootAsByteColumn(ByteBuffer _bb) { return getRootAsByteColumn(_bb, new ByteColumn()); }
  public static ByteColumn getRootAsByteColumn(ByteBuffer _bb, ByteColumn obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ByteColumn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String serializer() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serializerAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteCell values(int j) { return values(new ByteCell(), j); }
  public ByteCell values(ByteCell obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int valuesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public boolean missing(int j) { int o = __offset(8); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int missingLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer missingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }

  public static int createByteColumn(FlatBufferBuilder builder,
      int serializerOffset,
      int valuesOffset,
      int missingOffset) {
    builder.startObject(3);
    ByteColumn.addMissing(builder, missingOffset);
    ByteColumn.addValues(builder, valuesOffset);
    ByteColumn.addSerializer(builder, serializerOffset);
    return ByteColumn.endByteColumn(builder);
  }

  public static void startByteColumn(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addSerializer(FlatBufferBuilder builder, int serializerOffset) { builder.addOffset(0, serializerOffset, 0); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(1, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMissing(FlatBufferBuilder builder, int missingOffset) { builder.addOffset(2, missingOffset, 0); }
  public static int createMissingVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startMissingVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endByteColumn(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

