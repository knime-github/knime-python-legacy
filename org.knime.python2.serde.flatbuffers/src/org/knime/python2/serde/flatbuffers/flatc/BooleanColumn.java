// automatically generated by the FlatBuffers compiler, do not modify

package org.knime.python2.serde.flatbuffers.flatc;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BooleanColumn extends Table {
  public static BooleanColumn getRootAsBooleanColumn(ByteBuffer _bb) { return getRootAsBooleanColumn(_bb, new BooleanColumn()); }
  public static BooleanColumn getRootAsBooleanColumn(ByteBuffer _bb, BooleanColumn obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public BooleanColumn __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean values(int j) { int o = __offset(4); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int valuesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer valuesAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public boolean missing(int j) { int o = __offset(6); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int missingLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer missingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createBooleanColumn(FlatBufferBuilder builder,
      int valuesOffset,
      int missingOffset) {
    builder.startObject(2);
    BooleanColumn.addMissing(builder, missingOffset);
    BooleanColumn.addValues(builder, valuesOffset);
    return BooleanColumn.endBooleanColumn(builder);
  }

  public static void startBooleanColumn(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(0, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addMissing(FlatBufferBuilder builder, int missingOffset) { builder.addOffset(1, missingOffset, 0); }
  public static int createMissingVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startMissingVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endBooleanColumn(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

