# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatc

import flatbuffers

class KnimeTable(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKnimeTable(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KnimeTable()
        x.Init(buf, n + offset)
        return x

    # KnimeTable
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KnimeTable
    def RowIDs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KnimeTable
    def RowIDsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KnimeTable
    def ColNames(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # KnimeTable
    def ColNamesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # KnimeTable
    def Columns(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Column import Column
            obj = Column()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # KnimeTable
    def ColumnsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def KnimeTableStart(builder): builder.StartObject(3)
def KnimeTableAddRowIDs(builder, rowIDs): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(rowIDs), 0)
def KnimeTableStartRowIDsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KnimeTableAddColNames(builder, colNames): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(colNames), 0)
def KnimeTableStartColNamesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KnimeTableAddColumns(builder, columns): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(columns), 0)
def KnimeTableStartColumnsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def KnimeTableEnd(builder): return builder.EndObject()
