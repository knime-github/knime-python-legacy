<?xml version="1.0" encoding="UTF-8"?>
<knimeNode icon="pythonscript.png" type="Manipulator" xmlns="http://knime.org/node/v4.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://knime.org/node/v4.1 http://knime.org/node/v4.1.xsd">
	<name>Python Script</name>
	<shortDescription>
		Allows executing a Python script in a local Python environment.
	</shortDescription>
	<fullDescription>
		<intro>
			Allows executing a Python script in a local Python environment. The environment has to be configured under
			<i>File → Preferences → KNIME → Python</i> or via flow variable, as described in the
			<a href="https://docs.knime.com/latest/python_installation_guide/">
				KNIME Python Integration Installation Guide
			</a>.<br/>
			This node supports Python 2 and 3. It also allows to import Jupyter notebooks as Python modules via the
			<a href="https://docs.knime.com/latest/python_installation_guide/#_load_jupyter_notebooks_from_knime">
				knime_jupyter
			</a> module that is available in the node's Python workspace.<br />
			Multiple input and output ports of various types can dynamically be added to the node and used in the script.
			See section <i>Ports</i> below for a description of all available inputs and outputs, and how they can be
			addressed in the Python script.
		</intro>
		<tab name="Script">
			<option name="Editor">
				The script in the editor panel in the center will later be executed to generate this node's outputs.
				<i>Execute script</i> executes the full script while <i>Execute selected lines</i> executes only the
				currently selected part of the script.<br />
				The editor optionally provides autocompletion (CTRL + Space) if the Python module <b>jedi</b> is
				installed in the Python environment used by the node.<br />
				<b>Note</b> that when in the editor, only a limited number of input rows is made available to the script
				for interactivity reasons. This can be configured via the <i>Row limit (dialog)</i> option (see below).
			</option>
			<option name="Flow variables">
				The pane on the left side of the editor panel lists the available flow variables. A double click on a
				flow variable inserts the corresponding identifier at the current cursor position in the editor panel.
			</option>
			<option name="Workspace">
				The pane on the right side of the editor panel is the workspace and lists the currently defined
				identifiers in the running Python instance. <i>Reset workspace</i> will remove the output of all past
				script executions.
			</option>
			<option name="Console">
				The console under the editor panel displays the standard output and standard error of the running Python
				instance as well as other information.
			</option>
		</tab>
		<tab name="Options">
			<option name="Row limit (dialog)">
				Limits how many rows of input data are loaded into the dialog. This is useful to maintain the
				interactivity of script executions in the dialog when there are lots of input data. Changing this value
				only takes effect after resetting the node's workspace or closing and reopening the dialog. <br />
				When actually <i>executing</i> the node, all of the input data will be considered regardless of this
				option, of course.
			</option>
			<option name="Use Python version">
				Allows to choose the Python version that is used to execute the node. The available environments of the
				different versions can be checked and configured under File → Preferences → KNIME → Python. They can also
				be set via flow variable (see section <i>Flow Variables</i> below).
			</option>
			<option name="Missing values (Integer, Long)">
				By default, <i>Number (Integer)</i> and <i>Number (Long)</i> columns containing missing values are
				converted into <i>double</i> in Python because double is the only numeric type that has a built-in
				representation for missing values (<i>NaN</i>). Converting longs to doubles, however, introduces
				imprecision. The conversion may be avoided by replacing missing values with so-called sentinel values.<br />
				To convert missing values into sentinel values before script execution, check the first option. To
				convert sentinel values back into missing values after script execution, check the second option.<br />
				Three different types of sentinel values are available: <i>MIN_VAL</i> (the smallest possible value for
				the column's data type), <i>MAX_VAL</i> (the largest possible value for the column's data type), or a
				custom integer value to be entered into the text field. The chosen sentinel values will be available in
				the node's workspace as <i>INT_SENTINEL</i> and <i>LONG_SENTINEL</i>, respectively.
			</option>
			<option name="Rows per chunk">
				Large tables are broken into chunks when they are transferred between Python and Java. This option
				controls how many rows are included in each chunk. The default value is intended for tables containing
				few columns having numeric types. If larger data types like images or text are transferred, a single
				chunk may exceed the maximum allowed buffer size. In this case lowering the value of this parameter
				helps getting reasonably sized chunks.
			</option>
		</tab>
		<tab name="Templates">
			<option name="Create from editor...">
				Clicking on this button creates a new template based on the script in the editor panel of the script tab.<br />
				Note: User defined templates can be found in the folder:
				<i>knime-workspace/.metadata/knime/sourcecode-templates/python-script-dynamic-ports</i>.
			</option>
			<option name="Remove selected">
				Clicking on this button removes the selected template.<br />
				Note: Templates provided by plugins cannot be removed.
			</option>
			<option name="Apply selected">
				Replaces the script in the editor panel of the script tab with the selected template.
			</option>
		</tab>
		<tab name="Flow Variables">
			<option name="pythonVersionOption">
				Controls the <i>Use Python version</i> option above. The variable accepts either <i>python2</i> or
				<i>python3</i> as value.
			</option>
			<option name="python2Command">
				Controls which Python 2 environment is employed by this node if it is configured to use Python 2. This
				allows using an environment that is different from the one that is configured in the Preferences. The
				flow variable accepts the path to a Python start script or executable as described in the
				<a href="https://docs.knime.com/latest/python_installation_guide/#configure_environments_per_node">
					KNIME Python Integration Installation Guide
				</a>.
			</option>
			<option name="python3Command">
				Controls which Python 3 environment is employed by this node if it is configured to use Python 3. This
				allows using an environment that is different from the one that is configured in the Preferences. The
				flow variable accepts the path to a Python start script or executable as described in the
				<a href="https://docs.knime.com/latest/python_installation_guide/#configure_environments_per_node">
					KNIME Python Integration Installation Guide
				</a>.
			</option>
			<option name="sentinelOption">
				Controls the type of sentinel value. The flow variable accepts <i>MIN_VALUE</i>, <i>MAX_VALUE</i>, or
				<i>CUSTOM</i> as value. Setting this variable to <i>CUSTOM</i> makes the node respect the custom integer
				value either set in the dialog or via the <i>sentinelValue</i> flow variable.
			</option>
		</tab>
	</fullDescription>
	<ports>
		<dynInPort name="Database connection (legacy)" group-identifier="Database connection (legacy)"
			insert-before="0">
			An input database connection. It provides all relevant information needed to connect to a database as well
			as an input SQL query used to initially fetch data from the database. In the Python script, it is available
			as variable <b>db_util</b> of type <i>DBUtil</i>.
		</dynInPort>
		<dynInPort name="Pickled object" group-identifier="Input object (pickled)" insert-before="0">
			An input object. Input objects are automatically unpickled and made available to the Python script as
			variables whose names follow the scheme: <b>input_object_&lt;index&gt;</b>. For example, variable
			<b>input_object_1</b> refers to the object at the first inbound <i>Pickled object</i> port.
		</dynInPort>
		<dynInPort name="Table" group-identifier="Input table" insert-before="0">
			An input table. In the Python script, input tables are available as variables of type
			<i>pandas.DataFrame</i>. The names of the variables follow the scheme:
			<b>input_table_&lt;index&gt;</b>. For example, variable <b>input_table_1</b> refers to the table at the
			first inbound <i>Table</i> port.
		</dynInPort>
		<dynOutPort name="Database connection (legacy)" group-identifier="Database connection (legacy)"
			insert-before="0">
			An output database connection. It holds the result table containing data from the database. The data in the
			result table is fetched either using the output SQL query that was explicitly set in the script via
			<i>db_util.set_output_query(...)</i> or -- if the former was not set -- an automatically determined SQL
			query.
		</dynOutPort>
		<dynOutPort name="Table" group-identifier="Output table" insert-before="0">
			An output table. The corresponding variable must be defined in the Python script. It must be of type
			<i>pandas.DataFrame</i> and its name must follow the scheme: <b>output_table_&lt;index&gt;</b>. For example,
			in order to populate the first outbound <i>Table</i> port, variable <b>output_table_1</b> must be defined as
			described.
		</dynOutPort>
		<dynOutPort name="Image" group-identifier="Output image" insert-before="0">
			An output image. The corresponding variable must be defined in the Python script. It must be either a string
			describing an SVG image or a byte array encoding a PNG image. Its name must follow the scheme:
			<b>output_image_&lt;index&gt;</b>. For example, in order to populate the first outbound <i>Image</i> port,
			variable <b>output_image_1</b> must be defined as described. 
		</dynOutPort>
		<dynOutPort name="Pickled object" group-identifier="Output object (pickled)" insert-before="0">
			An output object.The corresponding variable must be defined in the Python script. It can be of any type that
			can be pickled. Its name must follow the scheme: <b>output_object_&lt;index&gt;</b>. For example, in order to
			populate the first outbound <i>Pickled object</i> port, variable <b>output_object_1</b> must be defined as
			described.
		</dynOutPort>
	</ports>
	<views>
		<view name="Standard output" index="0">
			The text sent by Python to its standard output during the execution of this node.
		</view>
		<view name="Error output" index="1">
			The text sent by Python to its error output during the execution of this node.
		</view>
	</views>
</knimeNode>
