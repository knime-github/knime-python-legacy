<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.knime.python" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.knime.python" id="org.knime.python.typeextension" name="Python type extension"/>
      </appinfo>
      <documentation>
         Extension point to serialize and deserialize data from KNIME to Python and back.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="type"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="type">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique ID used to find the correct deserializer to a serialized cell.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="python-type-identifier" type="string" use="required">
            <annotation>
               <documentation>
                  Used to identify the correct serializer to a given Python object. Modules are only loaded once a Python object with the same type id is encountered.

The identifier can be created with the following Python function:

def get_type_id(object):
    if hasattr(object, &apos;__module__&apos;):
        return object.__module__ + &apos;.&apos; + object.__class__.__name__
    else:
        return object.__class__.__name__
               </documentation>
            </annotation>
         </attribute>
         <attribute name="java-deserializer-factory" type="string" use="required">
            <annotation>
               <documentation>
                  Java deserializer that generates DataCells from bytes.

Has to understand the serialized objects created by the Python serializer.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.knime.python.typeextension.DeserializerFactory:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="python-serializer" type="string" use="required">
            <annotation>
               <documentation>
                  Path to the Python serializer (starting from the plugins root) that generates bytes from Python objects.

The serializer has to implement the function serialize(object).

Please note that the containing plugin needs to be unpacked, so that the external Python process can access the module.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
