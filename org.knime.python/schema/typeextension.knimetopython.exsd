<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.knime.python" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.knime.python" id="org.knime.python.typeextension" name="Python type extension"/>
      </appinfo>
      <documentation>
         Extension point to serialize and deserialize data from KNIME to Python and back.
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="type"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="type">
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique ID used to find the correct deserializer to a serialized cell.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="java-serializer-factory" type="string" use="required">
            <annotation>
               <documentation>
                  Java serializer that generates bytes from DataValues and DataCells from bytes.

Has to understand the same serialized objects as the Python serializer.
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.knime.python.typeextension.SerializerFactory:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="python-deserializer" type="string" use="required">
            <annotation>
               <documentation>
                  Path to the Python deserializer (starting from the plugins root) that generates Python objects from bytes.

Has to understand the serialized objects created by the Java serializer.

The deserializer has to implement the function deserialize(bytes).

Please note that the containing plugin needs to be unpacked, so that the external Python process can access the module.
               </documentation>
               <appinfo>
                  <meta.attribute kind="resource"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         [Enter the first release in which this extension point appears.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>


</schema>
